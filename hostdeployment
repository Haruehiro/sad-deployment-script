#!/bin/bash

# Initial Setup
echo "Updating package list and upgrading existing packages..."
sudo apt update && sudo apt upgrade -y

# Install Dependencies
echo "Installing necessary packages..."
sudo apt install -y \
    docker.io \
    docker-compose \
    nano \
    git \
    curl \
    wget \
    unzip \
    nginx \
    ufw \
    fail2ban

# Server Hardening
echo "Configuring server hardening..."
sudo ufw enable
sudo ufw default deny incoming
sudo ufw default allow outgoing
sudo ufw allow ssh
sudo ufw allow http
sudo ufw allow https
sudo ufw allow 2375
sudo ufw allow 2376
sudo ufw allow 9443

# Docker Configuration
echo "Configuring Docker settings..."
sudo systemctl enable docker
sudo docker network create --driver bridge app-network

# Install Portainer
echo "Installing Portainer..."
sudo docker volume create portainer_data
sudo docker run -d -p 9443:9443 \
    --name portainer \
    --restart=always \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -v portainer_data:/data \
    portainer/portainer-ce:latest

# Install Certbot
echo "Installing Certbot..."
sudo apt install -y certbot python3-certbot-nginx

# Nginx Configuration
echo "Configuring Nginx Web Server settings..."
sudo tee /etc/nginx/sites-available/default <<EOF
server {
    listen 80;
    server_name sayonarakuso.com;

    location / {
        proxy_pass http://localhost:8080;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_cache_bypass \$http_upgrade;
    }
}
EOF
sudo service nginx restart

# Fail2Ban Configuration
echo "Configuring Fail2Ban settings..."
sudo tee /etc/fail2ban/jail.local <<EOF
[sshd]
enabled = true
port = ssh
filter = sshd
logpath = /var/log/auth.log
maxretry = 3
EOF
sudo service fail2ban restart

# Two-Factor Authentication (Google Authenticator)
echo "Installing Google Authenticator..."
sudo apt install -y libpam-google-authenticator
sudo tee /etc/pam.d/sshd <<EOF
auth required pam_google_authenticator.so
EOF
sudo tee /etc/ssh/sshd_config <<EOF
ChallengeResponseAuthentication yes
AuthenticationMethods publickey,keyboard-interactive
EOF
sudo service ssh restart

# User Management
echo "Creating a new user and adding them to the Docker group..."
sudo useradd -m -s /bin/bash -G docker your_username
echo "Please switch to the new user: su - your_username"

# Docker Compose Setup
echo "Creating a default Docker Compose file..."
sudo tee docker-compose.yml <<EOF
version: '3'

services:
  web:
    build: .
    ports:
      - "8080:80"
    networks:
      - app-network
    restart: always

networks:
  app-network:
    external: true
EOF

# Final Steps
echo "Build and start the Docker container: docker-compose up -d"
echo "Configure the web application and Nginx settings as needed."